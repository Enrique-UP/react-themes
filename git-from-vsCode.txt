https://www.youtube.com/watch?v=14R1mI47SOc
Mridul Srivastava tutorial





01. Open folder in vs code =>
02. Signin on github account =>
03. Go to top right corner (or click on profile) on github =>
04. Go to Your repositories =>
05. click on new =>
06. write repository name (demofiles) =>
07. after that click on create repository =>
08. copy url by ctrl + l =>

09. Go to return vs code =>
10. click on share icon (source control) top left sidebar =>
11. initialize repository =>
12. type message on top left sidebar (new changes) =>
13. then click on check icon =>
14. click on popup to yes =>
15. click on three dots on top left =>
16. click on pull, push =>
17. push to =>
18. add remote =>
19. copied url paste on top header then press enter =>
20. after that type remote name (demo) then press enter =>
21. go to return three dots =>
22. go to pull push =>
23. then click on push to =>
24. go to top header and click =>
25. click on already copied link =>
Done.



How do we clone git to local.
1. open vs code.
2. copy folder url from git.
3. click on share top left sidebar.
4. click on clone repository.
5. go to middle top header & paste url and select.
6. choose folder then done.


For delete repository from live github.com
Go inside the folder which you want to delete => settings => scroll down => Delete this repository => 








==========================================================================================
git by gitdesktop and gitbash

Follow all the steps.

Step 1: initialize git
	$ git init

Step 2: Check files are exist or not.
	$git ls

Step 3 : Add the file
	$git add filename

Step 4: Add comment to show
	$git commit -m "your comment"

Step 5: Link to your repository
	$git remote add origin  "copy repository link  and paste here"

Step 6: Push on Git
	$ git push -u origin master
==========================================================================================
Step-by-Step Solution
1. Check the Status in GitHub Desktop
	Open GitHub Desktop and ensure the repository is selected.
	Look at the "Changes" tab:
	If you see the untracked files listed, it means they are detected but not staged.
2. Stage the Files in GitHub Desktop
	If the files appear under "Changes", make sure their checkboxes are selected.
	If they are unchecked, they will not be staged for commit. Check them manually.
3. Commit the Changes
	Once the files are staged, write a commit message in the Summary section at the bottom left of GitHub Desktop.
	Click "Commit to <branch>" to commit the changes.
==========================================================================================
b. Manually Add Files Using Git CLI
	If GitHub Desktop doesnâ€™t stage the files, use the command line:

Open the terminal and navigate to your repository:
bash
	cd path/to/your/repository

Add the untracked files:
bash
	git add .
	This stages all untracked files. If you want to add specific files, replace . with the file name, e.g., git add file.txt.

Verify the staged files:
bash
	git status
	Ensure the files are listed as staged for commit.

Commit the changes:
bash
	git commit -m "Add untracked files"

Push the changes to the remote repository:
bash
	git push
==========================================================================================
git status
git add .
git commit -m "Describe what you're committing"
==========================================================================================
Using GitHub Desktop:
Open the Repository in GitHub Desktop:
Launch GitHub Desktop and open your repository.

View Changes:
Navigate to the Changes tab on the left sidebar. You should see the untracked files listed there.

Add Files to Tracking:
Check the boxes next to the files you want to track. This stages them for a commit.

Commit Changes:
Write a commit message in the text box at the bottom.
Click Commit to [branch name] to save the changes locally.
Push to Remote (Optional):

If you want to upload these changes to the remote repository, click Push Origin in the top-right corner.
==========================================================================================
Using the Command Line:
Check Status: Run:

git status
git add .
git commit -m "Your commit message"
git push